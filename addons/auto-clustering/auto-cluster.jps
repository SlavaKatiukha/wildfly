{
  "jpsType": "update",
  "jpsVersion": "0.99",
  "name": "WildFly Auto-Cluster",
  "logo": "https://goo.gl/epR2KT",
  "id": "wildfly-cluster",
  "description": {
    "short": "WildFly Auto-Cluster (Beta)",
    "text": "WildFly Auto-Cluster (Beta)"
  },
  "globals": {
    "workerUser": "worker",
    "workerPswd": "${fn.password}"
  },
  "baseUrl": "https://raw.githubusercontent.com/SiryjVyiko/wildfly/master/",
  "onInstall": {
    "forEach(nodes.cp)": {
      "if (${@i.ismaster})": {
        "install": {
          "settings": {
            "masterId": "${@i.id}"
          },
          "jps": {
            "type": "update",
            "name": "Wildfly Auto-Cluster",
            "envName": "${env.envName}",
            "onInstall": [
              {
                "if (!nodes.ctrl && nodes.cp.length > 1)": [
                  "buildCluster"
                ]
              },
              "setJavaMemoryOpts"
            ],
            "onAfterRedeployContainer[cp]": {
              "cmd[cp]": "sudo service wildfly restart"
            },
            "onBeforeServiceScaleOut[cp]": [
              {
                "if (!nodes.ctrl)": [
                  "saveDatasources",
                  "buildCluster",
                  "migrateToDomain"
                ]
              }
            ],
            "onAfterSetCloudletCount[cp]": [
              {
                "if (nodes.ctrl)": "setJavaMemoryOpts"
              }
            ],
            "onAfterResetNodePassword[cp]": [
              {
                "if (nodes.ctrl)": "addAdminUser"
              }
            ],
            "actions": {
              "setJavaMemoryOpts": {
                "cmd[${nodes.cp.first.id}]": [
                  "sudo domainMemoryConfig;"
                ]
              },
              "migrateToDomain": {
                "cmd[${nodes.cp.first.id}]": [
                  "sudo restoreDatasources; sudo migrateDeployments;"
                ]
              },
              "saveDatasources": {
                "cmd[${nodes.cp.first.id}]": [
                  "sudo saveDatasources;"
                ]
              },
              "buildCluster": [
                {
                  "addNodes": {
                    "fixedCloudlets": "${nodes.cp.first.fixedCloudlets}",
                    "flexibleCloudlets": 6,
                    "displayName": "Controller",
                    "nodeType": "docker",
                    "nodeGroup": "ctrl",
                    "dockerName": "${nodes.cp.first.customitem.dockerName}",
                    "dockerTag": "${nodes.cp.first.customitem.dockerTag}",
                    "metadata": {
                      "layer": "ctrl"
                    },
                    "dockerEnvVars": {
                      "CTRL": "true",
                      "WORKER_USER": "${globals.workerUser}",
                      "WORKER_PASSWORD": "${globals.workerPswd}",
                      "JBOSS_MODE": "domain",
                      "JELASTIC_EXPOSE": "4949"
                    }
                  }
                },
                {
                  "script": [
                    "var resp = jelastic.environment.control.GetEnvInfo('${env.envName}', session)",
                    "if (resp.result != 0) return resp",
                    "for (var i = 0, node; node = resp.nodes[i]; i++) {",
                    "  if (node.nodeGroup == 'ctrl' && node.ismaster) {",
                    "    return { result: 0, onAfterReturn : {setupCtrl: {ctrlNodeId: node.id}}}",
                    "  }",
                    "}"
                  ]
                },
                "addAdminUser"
              ],
              "setupCtrl": [
                {
                  "addWokerUser": {
                    "ctrlNodeId": "${this.ctrlNodeId}"
                  }
                },
                {
                  "linkLayers": {
                    "ctrlNodeId": "${this.ctrlNodeId}"
                  }
                },
                {
                  "forEach(wnode:nodes.cp)": {
                    "updateLink2CtrlConsole": {
                      "nodeId": "${@wnode.id}",
                      "ctrlNodeId": "${this.ctrlNodeId}"
                    }
                  }
                },
                {
                  "cmd[cp]": "sudo service wildfly restart"
                }
              ],
              "addWokerUser": {
                "cmdViaApiById": {
                  "nodeId": "${this.ctrlNodeId}",
                  "command": "$STACK_PATH/bin/add-user.sh $WORKER_USER $WORKER_PASSWORD"
                }
              },
              "addAdminUser": { 
                "script": "${baseUrl}/scripts/setAdminPassword.js?_r=${fn.random}" 
              },
              "linkLayers": {
                "forEach(wnode:nodes.cp)": [
                  {
                    "api": "env.control.LinkDockerNodes",
                    "sourceNodeId": "${this.ctrlNodeId}",
                    "targetNodeId": "${@wnode.id}",
                    "groupAlias": "ctrl",
                    "alias": "ctrl"
                  }
                ]
              },
              "cmdViaApiById": {
                "api": "env.control.ExecCmdById",
                "nodeId": "${this.nodeId}",
                "commandList": [
                  {
                    "command": "${this.command}"
                  }
                ]
              },
              "updateLink2CtrlConsole": {
                "cmdViaApiById": {
                  "nodeId": "${this.nodeId}",
                  "command": "sed -i \"s#/console#http://node${this.ctrlNodeId}-${env.domain}/console#g\" ${STACK_PATH}/welcome-content/index.html"
                }
              }
            }
          }
        }
      }
    }
  },
  "onAfterClone": [
    {
      "api": "environment.control.SendEnvCreatedEmail",
      "appid": "${event.response.env.appid}",
      "isImport": true
    },
    {
      "install": {
        "jps": "${baseUrl}/addons/auto-clustering/auto-cluster.jps?_r=${fn.random}",
        "envName": "${event.response.env.envName}"
      }
    }
  ]
}
