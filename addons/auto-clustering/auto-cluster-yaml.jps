---
jpsType: update
jpsVersion: 0.99
name: WildFly Auto-Cluster
logo: https://goo.gl/epR2KT
id: wildfly-cluster
description:
  short: WildFly Auto-Cluster
  
globals:
  workerUser: worker
  workerPswd: ${fn.password}
  
baseUrl: https://raw.githubusercontent.com/SiryjVyiko/wildfly/master/addons/auto-clustering

nodeGroupAlias:
  ${targetNodes.nodeGroup}: cp

onInstall:
  forEach(nodes.cp):
    if (${@i.ismaster}):
      install:
        settings:
          masterId: "${@i.id}"
        jps:
          type: update
          name: Wildfly Auto-Cluster
          envName: ${env.envName}
          
          nodeGroupAlias:
            ${targetNodes.nodeGroup}: cp
  
          onInstall:
          - if (nodes.ctrl && nodes.cp.length > 1):
            - setRedirectToController
            - forEach(wnode:nodes.cp):
                cmd:
                  nodeId: ${@wnode.id}
                  commands:
                  - sed -i "s#http://node.*/console#http://node${nodes.ctrl.first.id}-${env.domain}/console#g" ${STACK_PATH}/welcome-content/index.html
          - if (!nodes.ctrl && nodes.cp.length > 1):
            - buildCluster
            
          onAfterRedeployContainer[cp]:
          - cmd[cp]: sudo service wildfly restart
          - setRedirectToController
          - if (nodes.ctrl): setJavaMemoryOpts
              
          onBeforeServiceScaleOut[cp]:
          - if (!nodes.ctrl):
            - saveDatasources
            - buildCluster
            
          onAfterServiceScaleOut[cp]:
          - cmd[cp]: sudo service wildfly restart
          - forEach(wnode:nodes.cp):
              updateLink2CtrlConsole:
                nodeId: ${@wnode.id}
                ctrlNodeId: ${nodes.ctrl.first.id}
          - setNodeDisplayName [cp]: Worker
          - if (nodes.ctrl): setJavaMemoryOpts
          
          onAfterSetCloudletCount[cp]:
          - if (nodes.ctrl): setJavaMemoryOpts
          
          onAfterResetNodePassword[cp]:
          - if (nodes.ctrl): addAdminUser
          
          actions:
            setJavaMemoryOpts:
              cmd[${nodes.cp.first.id}]:
              - sudo domainMemoryConfig
              
            migrateToDomain:
              cmd[${nodes.cp.first.id}]:
              - sudo restoreDatasources; sudo migrateDeployments;
              
            saveDatasources:
              cmd[${nodes.cp.first.id}]:
              - sudo saveDatasources;
              
            buildCluster:
            - addNodes:
                fixedCloudlets: ${nodes.cp.first.fixedCloudlets}
                flexibleCloudlets: 6
                displayName: Controller
                nodeType: docker
                nodeGroup: ctrl
                dockerName: ${nodes.cp.first.customitem.dockerName}
                dockerTag: ${nodes.cp.first.customitem.dockerTag}
                metadata:
                  layer: ctrl
                dockerEnvVars:
                  CTRL: 'true'
                  WORKER_USER: ${globals.workerUser}
                  WORKER_PASSWORD: ${globals.workerPswd}
                  JBOSS_MODE: domain
                  JELASTIC_EXPOSE: 4949
                  
            - api: env.control.SetNodeGroupDisplayName
              nodeGroup: ctrl
              displayName: Domain Controller
  
            - api: env.control.SetNodeGroupDisplayName
              nodeGroup: cp
              displayName: Workers     
                  
            - script: |
                var resp = jelastic.environment.control.GetEnvInfo('${env.envName}', session)
                if (resp.result != 0) return resp
                for (var i = 0, node; node = resp.nodes[i]; i++) {
                  if (node.nodeGroup == 'ctrl' && node.ismaster) {
                    return {result: 0, onAfterReturn: {setupCtrl: {ctrlNodeId: node.id}}}
                  }
                }
                
            - addAdminUser
            - setNodeDisplayName[cp]: Worker
            - migrateToDomain
            - setJavaMemoryOpts
            setupCtrl:
            - addWokerUser:
                ctrlNodeId: ${this.ctrlNodeId}
            - linkLayers:
                ctrlNodeId: ${this.ctrlNodeId}
            - forEach(wnode:nodes.cp):
                updateLink2CtrlConsole:
                  nodeId: ${@wnode.id}
                  ctrlNodeId: ${this.ctrlNodeId}
            - cmd[cp]: sudo service wildfly restart
            - setRedirectToController
                
            addWokerUser:
              cmdViaApiById:
                nodeId: ${this.ctrlNodeId}
                command: $STACK_PATH/bin/add-user.sh $WORKER_USER $WORKER_PASSWORD 2>&1
                  
            addAdminUser:
              script: ${baseUrl}/scripts/setAdminPassword.js?_r=${fn.random}
              
            linkLayers:
              forEach(wnode:nodes.cp):
              - api: env.control.LinkDockerNodes
                sourceNodeId: ${this.ctrlNodeId}
                targetNodeId: ${@wnode.id}
                groupAlias: ctrl
                alias: ctrl
                
            cmdViaApiById:
              api: env.control.ExecCmdById
              nodeId: ${this.nodeId}
              commandList:
              - command: ${this.command}
              
            updateLink2CtrlConsole:
              cmdViaApiById:
                nodeId: ${this.nodeId}
                command: sed -i "s#href=\"/console\"#href=\"http://node${this.ctrlNodeId}-${env.domain}/console\"#g" ${STACK_PATH}/welcome-content/index.html
                
            setRedirectToController:
              cmd[cp]:
                commands:
                - sudo setAdminPanelRedirect
                
onAfterClone:
- api: environment.control.SendEnvCreatedEmail
  appid: "${event.response.env.appid}"
  isImport: true
- install:
    jps: ${baseUrl}/auto-cluster-yaml.jps?_r=${fn.random}
    envName: ${event.response.env.envName}
    nodeGroup: cp
